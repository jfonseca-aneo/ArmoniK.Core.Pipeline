name: Test

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Core image tag'
        required: true

jobs:
  testStreamDC:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ github.event.inputs.tag  }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        queue:
          - activemqp
          - artemis
          - rabbitmq
          - rabbitmq091
        log-level:
          - Information
          - Verbose
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
          pip install awscli

      - name: Setup just
        uses: extractions/setup-just@v1
        with:
          just-version: '1.8.0'

      - name: Deploy Core
        run: |
          just LOGGING_LEVEL=${{ matrix.log-level }} tag=${VERSION} queue=${{ matrix.queue }} worker=stream deploy

      - name: Run Stream Test
        timeout-minutes: 10
        run: |
          cd ./Tests/Stream/Client/
          export GrpcClient__Endpoint=http://localhost:5001
          export Partition=TestPartition0
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test - ${{ matrix.queue }} x ${{ matrix.log-level }}
          path: ./Tests/Stream/Client/TestResults/test-results.trx
          reporter: dotnet-trx

  testHtcMockDC:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        queue:
          - activemqp
          - rabbitmq
          - rabbitmq091
        log-level:
          - Information
          - Verbose
    name: HtcMock ${{ matrix.queue }} ${{ matrix.log-level }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
          pip install awscli

      - name: Setup just
        uses: extractions/setup-just@v1
        with:
          just-version: '1.8.0'

      - name: Deploy Core
        run: |
          just LOGGING_LEVEL=${{ matrix.log-level }} tag=${VERSION} queue=${{ matrix.queue }} worker=htcmock deploy

      - name: Run HtcMock test 100 tasks 1 level
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=1 \
            -e HtcMock__Partition=TestPartition0 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION

      - name: Run HtcMock test 100 tasks 4 levels
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=4 \
            -e HtcMock__Partition=TestPartition0 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION

      - name: Run HtcMock test 1000 tasks 1 level
        timeout-minutes: 10
        if: ${{ matrix.log-level != 'Verbose' }}
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=1000 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=1 \
            -e HtcMock__Partition=TestPartition0 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION

      - name: Run HtcMock test 1000 tasks 4 levels
        timeout-minutes: 10
        if: ${{ matrix.log-level != 'Verbose' }}
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=1000 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=4 \
            -e HtcMock__Partition=TestPartition0 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION

  runBench:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
          pip install awscli

      - name: Setup just
        uses: extractions/setup-just@v1
        with:
          just-version: '1.8.0'

      - name: Deploy Core
        run: |
          just LOGGING_LEVEL=${{ matrix.log-level }} tag=${VERSION} queue=${{ matrix.queue }} worker=bench deploy

      - name: Run Bench test tasks - many tasks (200)
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e BenchOptions__NTasks=200 \
            -e BenchOptions__TaskDurationMs=100 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_bench_test_client:$VERSION
      - name: Run Bench test time - long tasks (10s)
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e BenchOptions__NTasks=2 \
            -e BenchOptions__TaskDurationMs=10000 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_bench_test_client:$VERSION
      - name: Run Bench test time - large payloads (10MB)
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e BenchOptions__NTasks=10 \
            -e BenchOptions__TaskDurationMs=10 \
            -e BenchOptions__ResultSize=1 \
            -e BenchOptions__PayloadSize=10000 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_bench_test_client:$VERSION
      - name: Run Bench test time - large results (10MB)
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e BenchOptions__NTasks=10 \
            -e BenchOptions__TaskDurationMs=10 \
            -e BenchOptions__ResultSize=10000 \
            -e BenchOptions__PayloadSize=1 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_bench_test_client:$VERSION

  defaultPartitionMock:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
          pip install awscli

      - name: Setup just
        uses: extractions/setup-just@v1
        with:
          just-version: '1.8.0'

      - name: Deploy Core
        run: |
          just tag=${VERSION} worker=htcmock deploy

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=1000 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=3 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json

  healthCheckTest:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
          pip install awscli

      - name: Setup just
        uses: extractions/setup-just@v1
        with:
          just-version: '1.8.0'

      - name: Deploy Core
        run: |
          just tag=${VERSION} deploy

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=3 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json

      - name: Health Check Test when database is down
        timeout-minutes: 10
        run: |
          just tag=${VERSION} stop database
          just healthChecks
          just tag=${VERSION} restoreDeployment database
          just healthChecks

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=3 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json

      - name: Health Check Test when queue is down
        timeout-minutes: 10
        run: |
          just tag=${VERSION} stop queue
          just healthChecks
          just tag=${VERSION} restoreDeployment queue
          just healthChecks

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=3 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json

      - name: Health Check Test when object is down
        timeout-minutes: 10
        run: |
          just tag=${VERSION} stop object
          just healthChecks
          just tag=${VERSION} restoreDeployment object
          just healthChecks

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=100 \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=3 \
            -e GrpcClient__Endpoint=http://armonik.control.submitter:1080 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json
